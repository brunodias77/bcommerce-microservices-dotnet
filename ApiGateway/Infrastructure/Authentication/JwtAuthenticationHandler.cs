using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.Extensions.Options;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text.Encodings.Web;
using Microsoft.IdentityModel.Tokens;
using Serilog;

namespace ApiGateway.Infrastructure.Authentication;

/// <summary>
/// üîê CLASSE DE AUTENTICA√á√ÉO JWT PERSONALIZADA
/// 
/// Esta classe √© um "Handler" (manipulador) personalizado para autentica√ß√£o JWT.
/// Ela herda do JwtBearerHandler do ASP.NET Core e adiciona funcionalidades extras.
/// 
/// O QUE FAZ:
/// - Valida tokens JWT vindos do Keycloak
/// - Extrai informa√ß√µes do usu√°rio do token
/// - Verifica se o endpoint √© p√∫blico ou privado
/// - Trata erros de token expirado ou inv√°lido
/// 
/// CONCEITOS IMPORTANTES:
/// - JWT = JSON Web Token (token de seguran√ßa)
/// - Handler = classe que processa um tipo espec√≠fico de autentica√ß√£o
/// - Claims = informa√ß√µes sobre o usu√°rio (ID, nome, roles, etc.)
/// - Principal = representa√ß√£o do usu√°rio autenticado no sistema
/// </summary>
public class JwtAuthenticationHandler : JwtBearerHandler
{
    // üìã DEPEND√äNCIAS INJETADAS
    // Essas depend√™ncias s√£o fornecidas pelo sistema de DI (Dependency Injection) do .NET
    private readonly ILogger<JwtAuthenticationHandler> _logger;           // Para registrar logs/eventos
    private readonly KeycloakAuthenticationOptions _options;              // Configura√ß√µes do Keycloak
    private readonly HttpClient _httpClient;                              // Para fazer chamadas HTTP (se necess√°rio)
    private readonly TimeProvider _timeProvider;                          // Para obter data/hora atual

    /// <summary>
    /// üèóÔ∏è CONSTRUTOR - RECEBE TODAS AS DEPEND√äNCIAS
    /// 
    /// O construtor √© chamado automaticamente pelo sistema de DI do ASP.NET Core.
    /// Todas essas depend√™ncias s√£o registradas no Program.cs e injetadas automaticamente.
    /// 
    /// PAR√ÇMETROS:
    /// - jwtOptions: Configura√ß√µes padr√£o do JWT Bearer
    /// - loggerFactory: F√°brica para criar loggers
    /// - encoder: Para codificar URLs (necess√°rio para o handler base)
    /// - keycloakOptions: Nossas configura√ß√µes personalizadas do Keycloak
    /// - httpClient: Para fazer chamadas HTTP externas
    /// - timeProvider: Para obter data/hora de forma test√°vel
    /// </summary>
    public JwtAuthenticationHandler(
        IOptionsMonitor<JwtBearerOptions> jwtOptions,
        ILoggerFactory loggerFactory,
        UrlEncoder encoder,
        IOptions<KeycloakAuthenticationOptions> keycloakOptions,
        HttpClient httpClient,
        TimeProvider timeProvider)
        : base(jwtOptions, loggerFactory, encoder) // Chama o construtor da classe pai (JwtBearerHandler)
    {
        // Inicializa as vari√°veis privadas com as depend√™ncias recebidas
        _logger = loggerFactory.CreateLogger<JwtAuthenticationHandler>();
        _options = keycloakOptions.Value; // .Value extrai a configura√ß√£o do Options pattern
        _httpClient = httpClient;
        _timeProvider = timeProvider;
    }

    /// <summary>
    /// üöÄ M√âTODO PRINCIPAL DE AUTENTICA√á√ÉO
    /// 
    /// Este m√©todo √© chamado AUTOMATICAMENTE pelo ASP.NET Core para cada requisi√ß√£o HTTP.
    /// √â um override (sobrescrita) do m√©todo da classe pai.
    /// 
    /// FLUXO DE EXECU√á√ÉO:
    /// 1. Verifica se o endpoint √© p√∫blico (n√£o precisa de autentica√ß√£o)
    /// 2. Extrai o token JWT do header Authorization
    /// 3. Valida o token
    /// 4. Cria um Principal (usu√°rio autenticado)
    /// 5. Retorna sucesso ou falha
    /// 
    /// RETORNO:
    /// - AuthenticateResult.Success: Usu√°rio autenticado com sucesso
    /// - AuthenticateResult.Fail: Autentica√ß√£o falhou
    /// - AuthenticateResult.NoResult: Endpoint p√∫blico, pula autentica√ß√£o
    /// </summary>
    protected override async Task<AuthenticateResult> HandleAuthenticateAsync()
    {
        try
        {
            // üîç PASSO 1: Verifica se √© um endpoint p√∫blico
            // Endpoints p√∫blicos n√£o precisam de token (ex: /health, /login)
            if (IsPublicEndpoint())
            {
                _logger.LogDebug("Public endpoint accessed, skipping authentication");
                return AuthenticateResult.NoResult(); // NoResult = "n√£o fazer nada, deixa passar"
            }

            // üîç PASSO 2: Extrai o token do header "Authorization: Bearer xyz123"
            var token = ExtractTokenFromHeader();
            if (string.IsNullOrEmpty(token))
            {
                // Se n√£o tem token, registra um warning e retorna falha
                _logger.LogWarning("No JWT token found in Authorization header");
                return AuthenticateResult.Fail("No JWT token provided");
            }

            // üîç PASSO 3: Valida o token JWT
            // Verifica assinatura, expira√ß√£o, issuer, audience, etc.
            var validationResult = await ValidateTokenAsync(token);
            if (!validationResult.IsValid)
            {
                _logger.LogWarning("JWT token validation failed: {Error}", validationResult.Error);
                return AuthenticateResult.Fail(validationResult.Error ?? "Token validation failed");
            }

            // üîç PASSO 4: Cria o Principal (usu√°rio autenticado)
            // Principal √© como o sistema representa o usu√°rio logado
            var principal = CreateClaimsPrincipal(validationResult.Claims);
            
            // Cria um "ticket" de autentica√ß√£o (comprovante de que o usu√°rio √© v√°lido)
            var ticket = new AuthenticationTicket(principal, Scheme.Name);

            // Log de sucesso com o ID do usu√°rio
            _logger.LogDebug("JWT authentication successful for user: {UserId}",
                principal.FindFirst("sub")?.Value); // "sub" = subject = ID do usu√°rio

            // üéâ Retorna sucesso!
            return AuthenticateResult.Success(ticket);
        }
        // üö® TRATAMENTO DE ERROS ESPEC√çFICOS
        catch (SecurityTokenExpiredException ex)
        {
            // Token expirado - erro espec√≠fico do JWT
            _logger.LogWarning("JWT token expired: {Message}", ex.Message);
            return AuthenticateResult.Fail("Token expired");
        }
        catch (SecurityTokenInvalidSignatureException ex)
        {
            // Assinatura do token inv√°lida - poss√≠vel tentativa de falsifica√ß√£o
            _logger.LogWarning("JWT token has invalid signature: {Message}", ex.Message);
            return AuthenticateResult.Fail("Invalid token signature");
        }
        catch (Exception ex)
        {
            // Qualquer outro erro inesperado
            _logger.LogError(ex, "Unexpected error during JWT authentication");
            return AuthenticateResult.Fail("Authentication error");
        }
    }

    /// <summary>
    /// üîì VERIFICA SE O ENDPOINT √â P√öBLICO
    /// 
    /// Alguns endpoints n√£o precisam de autentica√ß√£o:
    /// - /health (verifica√ß√£o de sa√∫de do sistema)
    /// - /login (para fazer login)
    /// - /api/catalog/products (cat√°logo p√∫blico)
    /// 
    /// COMO FUNCIONA:
    /// 1. Pega o caminho da URL atual
    /// 2. Compara com uma lista de caminhos p√∫blicos
    /// 3. Retorna true se encontrar uma correspond√™ncia
    /// </summary>
    private bool IsPublicEndpoint()
    {
        // Pega o caminho da URL atual e converte para min√∫sculas
        // Ex: "/api/clients/login" vira "/api/clients/login"
        var path = Context.Request.Path.Value?.ToLowerInvariant();

        // Lista de endpoints que N√ÉO precisam de autentica√ß√£o
        var publicEndpoints = new[]
        {
            "/health",                    // Health check do sistema
            "/health/ready",              // Verifica se est√° pronto
            "/health/live",               // Verifica se est√° vivo
            "/metrics",                   // M√©tricas do Prometheus
            "/api/clients/create-user",   // Cria√ß√£o de usu√°rio
            "/api/clients/login",         // Login
            "/api/catalog/products",      // Cat√°logo p√∫blico de produtos
            "/swagger",                   // Documenta√ß√£o da API
            "/api-docs"                   // Documenta√ß√£o da API
        };

        // Verifica se o caminho atual come√ßa com algum endpoint p√∫blico
        // Any() = "existe algum elemento que atenda a condi√ß√£o?"
        return publicEndpoints.Any(endpoint => path?.StartsWith(endpoint) == true);
    }

    /// <summary>
    /// üîç EXTRAI O TOKEN JWT DO HEADER AUTHORIZATION
    /// 
    /// O token JWT vem no formato: "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    /// 
    /// PASSOS:
    /// 1. Pega o valor do header "Authorization"
    /// 2. Verifica se come√ßa com "Bearer "
    /// 3. Remove o "Bearer " e retorna s√≥ o token
    /// 
    /// EXEMPLO:
    /// Input:  "Bearer abc123"
    /// Output: "abc123"
    /// </summary>
    private string? ExtractTokenFromHeader()
    {
        // Pega o primeiro valor do header "Authorization"
        // Headers podem ter m√∫ltiplos valores, mas geralmente √© s√≥ um
        var authHeader = Context.Request.Headers["Authorization"].FirstOrDefault();

        // Se n√£o tem header ou n√£o come√ßa com "Bearer ", retorna null
        if (string.IsNullOrEmpty(authHeader) || 
            !authHeader.StartsWith("Bearer ", StringComparison.OrdinalIgnoreCase))
        {
            return null;
        }

        // Remove "Bearer " do in√≠cio e retorna s√≥ o token
        // "Bearer abc123".Substring("Bearer ".Length) = "abc123"
        return authHeader.Substring("Bearer ".Length).Trim();
    }

    /// <summary>
    /// ‚úÖ VALIDA O TOKEN JWT
    /// 
    /// Esta √© a parte mais importante! Aqui verificamos se o token √© v√°lido:
    /// - Assinatura (n√£o foi alterado)
    /// - Expira√ß√£o (ainda est√° v√°lido)
    /// - Issuer (quem criou o token)
    /// - Audience (para quem o token foi criado)
    /// 
    /// PROCESSO:
    /// 1. Configura os par√¢metros de valida√ß√£o
    /// 2. Usa o JwtSecurityTokenHandler para validar
    /// 3. Extrai as claims (informa√ß√µes do usu√°rio) se v√°lido
    /// 4. Retorna resultado com sucesso/falha
    /// </summary>
    private async Task<TokenValidationResult> ValidateTokenAsync(string token)
    {
        try
        {
            // Cria o handler do .NET para trabalhar com JWT
            var tokenHandler = new JwtSecurityTokenHandler();

            // üîß CONFIGURA OS PAR√ÇMETROS DE VALIDA√á√ÉO
            var validationParameters = new TokenValidationParameters
            {
                ValidateIssuer = true,              // Verifica quem criou o token (Keycloak)
                ValidateAudience = true,            // Verifica se o token √© para nossa aplica√ß√£o
                ValidateLifetime = true,            // Verifica se o token n√£o expirou
                ValidateIssuerSigningKey = true,    // Verifica a assinatura digital
                
                // Valores esperados (configurados no appsettings.json)
                ValidIssuer = _options.Authority,           // URL do Keycloak
                ValidAudiences = _options.ValidAudiences,   // IDs das aplica√ß√µes v√°lidas
                
                // Toler√¢ncia para diferen√ßas de rel√≥gio entre servidores
                ClockSkew = TimeSpan.FromSeconds(_options.ClockSkewSeconds),
                
                // Fun√ß√£o para obter chaves de assinatura do Keycloak
                IssuerSigningKeyResolver = (token, securityToken, kid, parameters) =>
                {
                    return GetKeycloakSigningKeys();
                }
            };

            // üîç EXECUTA A VALIDA√á√ÉO
            var result = await tokenHandler.ValidateTokenAsync(token, validationParameters);

            if (result.IsValid)
            {
                // ‚úÖ TOKEN V√ÅLIDO
                var jwtToken = result.SecurityToken as JwtSecurityToken;
                return new TokenValidationResult
                {
                    IsValid = true,
                    Claims = result.ClaimsIdentity.Claims.ToList(), // Informa√ß√µes do usu√°rio
                    Token = jwtToken // Token decodificado
                };
            }
            else
            {
                // ‚ùå TOKEN INV√ÅLIDO
                return new TokenValidationResult
                {
                    IsValid = false,
                    Error = result.Exception?.Message ?? "Token validation failed"
                };
            }
        }
        catch (Exception ex)
        {
            // üö® ERRO INESPERADO
            _logger.LogError(ex, "Error validating JWT token");
            return new TokenValidationResult
            {
                IsValid = false,
                Error = ex.Message
            };
        }
    }

    /// <summary>
    /// üîë OBT√âM AS CHAVES DE ASSINATURA DO KEYCLOAK
    /// 
    /// O Keycloak usa chaves criptogr√°ficas para assinar os tokens JWT.
    /// Para validar um token, precisamos da chave p√∫blica correspondente.
    /// 
    /// NOTA: Esta implementa√ß√£o est√° simplificada.
    /// Em produ√ß√£o, voc√™ buscaria as chaves do endpoint JWKS do Keycloak:
    /// https://seu-keycloak.com/realms/seu-realm/.well-known/jwks_uri
    /// 
    /// Por enquanto, retorna vazio e deixa o ASP.NET Core fazer automaticamente.
    /// </summary>
    private IEnumerable<SecurityKey> GetKeycloakSigningKeys()
    {
        // TODO: Implementar busca das chaves JWKS do Keycloak
        // Esta implementa√ß√£o seria expandida para buscar chaves do endpoint JWKS do Keycloak
        // Por enquanto, retorna uma lista vazia - o ASP.NET Core far√° isso automaticamente
        return Enumerable.Empty<SecurityKey>();
    }

    /// <summary>
    /// üë§ CRIA UM CLAIMSPRINCIPAL (USU√ÅRIO AUTENTICADO)
    /// 
    /// ClaimsPrincipal √© como o .NET representa um usu√°rio autenticado.
    /// Cont√©m todas as informa√ß√µes sobre o usu√°rio (claims).
    /// 
    /// CLAIMS s√£o pares chave-valor com informa√ß√µes do usu√°rio:
    /// - "sub" = ID do usu√°rio
    /// - "name" = Nome do usu√°rio
    /// - "email" = Email do usu√°rio
    /// - "roles" = Roles/fun√ß√µes do usu√°rio
    /// 
    /// PROCESSO:
    /// 1. Cria uma ClaimsIdentity com as claims do token
    /// 2. Adiciona claims extras (timestamp, IP, etc.)
    /// 3. Cria o ClaimsPrincipal final
    /// </summary>
    private ClaimsPrincipal CreateClaimsPrincipal(IEnumerable<Claim> claims)
    {
        // Cria uma identidade com as claims extra√≠das do token
        // Scheme.Name identifica qual tipo de autentica√ß√£o foi usado
        var claimsIdentity = new ClaimsIdentity(claims, Scheme.Name);

        // Adiciona informa√ß√µes extras se necess√°rio
        EnrichUserClaims(claimsIdentity);

        // Cria e retorna o principal (usu√°rio autenticado)
        return new ClaimsPrincipal(claimsIdentity);
    }

    /// <summary>
    /// üé® ENRIQUECE AS CLAIMS COM INFORMA√á√ïES EXTRAS
    /// 
    /// Al√©m das claims que v√™m no token JWT, podemos adicionar informa√ß√µes extras:
    /// - Timestamp de quando foi autenticado
    /// - IP do usu√°rio
    /// - User Agent do browser
    /// - Roles extra√≠das do formato espec√≠fico do Keycloak
    /// 
    /// Isso √© √∫til para auditoria e logs detalhados.
    /// </summary>
    private void EnrichUserClaims(ClaimsIdentity identity)
    {
        // üîç EXTRAI ROLES DO TOKEN KEYCLOAK
        // O Keycloak armazena roles em um formato JSON espec√≠fico
        var realmAccess = identity.FindFirst("realm_access")?.Value;
        if (!string.IsNullOrEmpty(realmAccess))
        {
            // TODO: Parse do JSON realm_access para extrair roles
            // Formato t√≠pico: {"roles": ["admin", "user"]}
            // Implementa√ß√£o espec√≠fica para o formato do Keycloak
        }

        // ‚è∞ ADICIONA TIMESTAMP DA AUTENTICA√á√ÉO
        // √ötil para saber quando o usu√°rio foi autenticado
        identity.AddClaim(new Claim("auth_time", 
            DateTimeOffset.UtcNow.ToUnixTimeSeconds().ToString()));

        // üåê ADICIONA IP DO USU√ÅRIO
        // √ötil para auditoria e seguran√ßa
        identity.AddClaim(new Claim("request_ip", 
            Context.Connection.RemoteIpAddress?.ToString() ?? "unknown"));
    }

    /// <summary>
    /// üìä CLASSE PARA RESULTADO DA VALIDA√á√ÉO DO TOKEN
    /// 
    /// Esta classe interna (private) encapsula o resultado da valida√ß√£o JWT.
    /// √â como um "envelope" que carrega as informa√ß√µes da valida√ß√£o.
    /// 
    /// PROPRIEDADES:
    /// - IsValid: Se o token √© v√°lido ou n√£o
    /// - Error: Mensagem de erro se inv√°lido
    /// - Claims: Informa√ß√µes do usu√°rio extra√≠das do token
    /// - Token: Token JWT decodificado (objeto)
    /// </summary>
    private class TokenValidationResult
    {
        public bool IsValid { get; set; }                                    // Token v√°lido?
        public string? Error { get; set; }                                   // Mensagem de erro
        public IEnumerable<Claim> Claims { get; set; } = Enumerable.Empty<Claim>(); // Claims do usu√°rio
        public JwtSecurityToken? Token { get; set; }                         // Token decodificado
    }

    /// <summary>
    /// ‚è∞ VERIFICA SE O TOKEN EXPIROU
    /// 
    /// M√©todo utilit√°rio para verificar se um token JWT expirou.
    /// Compara a data de expira√ß√£o do token com a data/hora atual.
    /// 
    /// PAR√ÇMETROS:
    /// - token: Token JWT decodificado
    /// 
    /// RETORNO:
    /// - true: Token expirou
    /// - false: Token ainda √© v√°lido
    /// 
    /// NOTA: Usa TimeProvider para facilitar testes unit√°rios
    /// (permite "mockar" a data/hora atual nos testes)
    /// </summary>
    private bool IsTokenExpired(JwtSecurityToken token)
    {
        // Obt√©m a data/hora atual usando o TimeProvider
        var now = _timeProvider.GetUtcNow();
        
        // Compara com a data de expira√ß√£o do token
        // ValidTo = data/hora que o token expira
        return token.ValidTo <= now;
    }
}

/*
üìö CONCEITOS IMPORTANTES PARA ESTUDAR:

1. **JWT (JSON Web Token)**:
   - Formato de token de seguran√ßa
   - Cont√©m informa√ß√µes codificadas em Base64
   - Tem 3 partes: Header.Payload.Signature

2. **Claims**:
   - Informa√ß√µes sobre o usu√°rio
   - Formato chave-valor
   - Ex: {"sub": "12345", "name": "Jo√£o"}

3. **Handler Pattern**:
   - Classe especializada em processar um tipo de opera√ß√£o
   - No ASP.NET Core, handlers processam diferentes tipos de autentica√ß√£o

4. **Dependency Injection (DI)**:
   - Padr√£o onde as depend√™ncias s√£o fornecidas automaticamente
   - Facilita testes e manuten√ß√£o do c√≥digo

5. **Options Pattern**:
   - Padr√£o para configura√ß√µes no .NET
   - Permite carregar configura√ß√µes do appsettings.json

6. **Async/Await**:
   - Programa√ß√£o ass√≠ncrona em C#
   - Permite opera√ß√µes n√£o-bloqueantes

üìñ PR√ìXIMOS PASSOS DE ESTUDO:
- Entender como funciona o JWT
- Estudar o padr√£o Options no .NET
- Aprender sobre Dependency Injection
- Praticar programa√ß√£o ass√≠ncrona com async/await
*/

// using Microsoft.AspNetCore.Authentication;
// using Microsoft.AspNetCore.Authentication.JwtBearer;
// using Microsoft.Extensions.Options;
// using System.IdentityModel.Tokens.Jwt;
// using System.Security.Claims;
// using System.Text.Encodings.Web;
// using Microsoft.IdentityModel.Tokens;
// using Serilog;
//
// namespace ApiGateway.Infrastructure.Authentication;
//
// /// <summary>
// /// Handler personalizado para autentica√ß√£o JWT com funcionalidades avan√ßadas
// /// Implementa valida√ß√£o customizada, extra√ß√£o de contexto do usu√°rio e tratamento de erros
// /// </summary>
// public class JwtAuthenticationHandler : JwtBearerHandler
// {
//     private readonly ILogger<JwtAuthenticationHandler> _logger;
//     private readonly KeycloakAuthenticationOptions _options;
//     private readonly HttpClient _httpClient;
//     private readonly TimeProvider _timeProvider;
//
//     public JwtAuthenticationHandler(
//         IOptionsMonitor<JwtBearerOptions> jwtOptions,
//         ILoggerFactory loggerFactory,
//         UrlEncoder encoder,
//         IOptions<KeycloakAuthenticationOptions> keycloakOptions,
//         HttpClient httpClient,
//         TimeProvider timeProvider)
//         : base(jwtOptions, loggerFactory, encoder)
//     {
//         _logger = loggerFactory.CreateLogger<JwtAuthenticationHandler>();
//         _options = keycloakOptions.Value;
//         _httpClient = httpClient;
//         _timeProvider = timeProvider;
//     }
//
//     /// <summary>
//     /// Processa a autentica√ß√£o JWT com l√≥gica personalizada
//     /// </summary>
//     protected override async Task<AuthenticateResult> HandleAuthenticateAsync()
//     {
//         try
//         {
//             // Verifica se o endpoint √© p√∫blico (n√£o requer autentica√ß√£o)
//             if (IsPublicEndpoint())
//             {
//                 _logger.LogDebug("Public endpoint accessed, skipping authentication");
//                 return AuthenticateResult.NoResult();
//             }
//
//             // Extrai o token do header Authorization
//             var token = ExtractTokenFromHeader();
//             if (string.IsNullOrEmpty(token))
//             {
//                 _logger.LogWarning("No JWT token found in Authorization header");
//                 return AuthenticateResult.Fail("No JWT token provided");
//             }
//
//             var validationResult = await ValidateTokenAsync(token);
//             if (!validationResult.IsValid)
//             {
//                 _logger.LogWarning("JWT token validation failed: {Error}", validationResult.Error);
//                 return AuthenticateResult.Fail(validationResult.Error ?? "Token validation failed"); // CORRIGIDO
//             }
//
//             // Cria o principal com as claims do usu√°rio
//             var principal = CreateClaimsPrincipal(validationResult.Claims);
//             var ticket = new AuthenticationTicket(principal, Scheme.Name);
//
//             _logger.LogDebug("JWT authentication successful for user: {UserId}",
//                 principal.FindFirst("sub")?.Value);
//
//             return AuthenticateResult.Success(ticket);
//         }
//         catch (SecurityTokenExpiredException ex)
//         {
//             _logger.LogWarning("JWT token expired: {Message}", ex.Message);
//             return AuthenticateResult.Fail("Token expired");
//         }
//         catch (SecurityTokenInvalidSignatureException ex)
//         {
//             _logger.LogWarning("JWT token has invalid signature: {Message}", ex.Message);
//             return AuthenticateResult.Fail("Invalid token signature");
//         }
//         catch (Exception ex)
//         {
//             _logger.LogError(ex, "Unexpected error during JWT authentication");
//             return AuthenticateResult.Fail("Authentication error");
//         }
//     }
//
//     /// <summary>
//     /// Verifica se o endpoint atual √© p√∫blico (n√£o requer autentica√ß√£o)
//     /// </summary>
//     private bool IsPublicEndpoint()
//     {
//         var path = Context.Request.Path.Value?.ToLowerInvariant();
//
//         var publicEndpoints = new[]
//         {
//             "/health",
//             "/health/ready",
//             "/health/live",
//             "/metrics",
//             "/api/clients/create-user",
//             "/api/clients/login",
//             "/api/catalog/products", // Cat√°logo p√∫blico
//             "/swagger",
//             "/api-docs"
//         };
//
//         return publicEndpoints.Any(endpoint => path?.StartsWith(endpoint) == true);
//     }
//
//     /// <summary>
//     /// Extrai o token JWT do header Authorization
//     /// </summary>
//     private string? ExtractTokenFromHeader()
//     {
//         var authHeader = Context.Request.Headers["Authorization"].FirstOrDefault();
//
//         if (string.IsNullOrEmpty(authHeader) || !authHeader.StartsWith("Bearer ", StringComparison.OrdinalIgnoreCase))
//         {
//             return null;
//         }
//
//         return authHeader.Substring("Bearer ".Length).Trim();
//     }
//
//     /// <summary>
//     /// Valida o token JWT usando as configura√ß√µes do Keycloak
//     /// </summary>
//
//     private async Task<TokenValidationResult> ValidateTokenAsync(string token)
//     {
//         try
//         {
//             var tokenHandler = new JwtSecurityTokenHandler();
//
//             var validationParameters = new TokenValidationParameters
//             {
//                 ValidateIssuer = true,
//                 ValidateAudience = true,
//                 ValidateLifetime = true,
//                 ValidateIssuerSigningKey = true,
//                 ValidIssuer = _options.Authority,
//                 ValidAudiences = _options.ValidAudiences,
//                 ClockSkew = TimeSpan.FromSeconds(_options.ClockSkewSeconds),
//                 IssuerSigningKeyResolver = (token, securityToken, kid, parameters) =>
//                 {
//                     return GetKeycloakSigningKeys();
//                 }
//             };
//
//             var result = await tokenHandler.ValidateTokenAsync(token, validationParameters);
//
//             if (result.IsValid)
//             {
//                 var jwtToken = result.SecurityToken as JwtSecurityToken;
//                 return new TokenValidationResult
//                 {
//                     IsValid = true,
//                     Claims = result.ClaimsIdentity.Claims.ToList(),
//                     Token = jwtToken // CORRIGIDO - agora a propriedade existe
//                 };
//             }
//             else
//             {
//                 return new TokenValidationResult
//                 {
//                     IsValid = false,
//                     Error = result.Exception?.Message ?? "Token validation failed"
//                 };
//             }
//         }
//         catch (Exception ex)
//         {
//             _logger.LogError(ex, "Error validating JWT token");
//             return new TokenValidationResult
//             {
//                 IsValid = false,
//                 Error = ex.Message
//             };
//         }
//     }
//
//     /// <summary>
//     /// Obt√©m as chaves de assinatura do Keycloak JWKS endpoint
//     /// </summary>
//     private IEnumerable<SecurityKey> GetKeycloakSigningKeys()
//     {
//         // Esta implementa√ß√£o seria expandida para buscar chaves do endpoint JWKS do Keycloak
//         // Por enquanto, retorna uma lista vazia - o ASP.NET Core far√° isso automaticamente
//         return Enumerable.Empty<SecurityKey>();
//     }
//
//     /// <summary>
//     /// Cria um ClaimsPrincipal com as claims extra√≠das do token
//     /// </summary>
//     private ClaimsPrincipal CreateClaimsPrincipal(IEnumerable<Claim> claims)
//     {
//         var claimsIdentity = new ClaimsIdentity(claims, Scheme.Name);
//
//         // Adiciona claims personalizadas se necess√°rio
//         EnrichUserClaims(claimsIdentity);
//
//         return new ClaimsPrincipal(claimsIdentity);
//     }
//
//     /// <summary>
//     /// Enriquece as claims do usu√°rio com informa√ß√µes adicionais
//     /// </summary>
//     private void EnrichUserClaims(ClaimsIdentity identity)
//     {
//         // Extrai roles do token Keycloak (formato espec√≠fico)
//         var realmAccess = identity.FindFirst("realm_access")?.Value;
//         if (!string.IsNullOrEmpty(realmAccess))
//         {
//             // Parse do JSON realm_access para extrair roles
//             // Implementa√ß√£o espec√≠fica para o formato do Keycloak
//         }
//
//         // Adiciona timestamp da autentica√ß√£o
//         identity.AddClaim(new Claim("auth_time", DateTimeOffset.UtcNow.ToUnixTimeSeconds().ToString()));
//
//         // Adiciona informa√ß√µes do request
//         identity.AddClaim(new Claim("request_ip", Context.Connection.RemoteIpAddress?.ToString() ?? "unknown"));
//     }
//
//     /// <summary>
//     /// Resultado da valida√ß√£o do token
//     /// </summary>
//     private class TokenValidationResult
//     {
//         public bool IsValid { get; set; }
//         public string? Error { get; set; }
//         public IEnumerable<Claim> Claims { get; set; } = Enumerable.Empty<Claim>();
//         public JwtSecurityToken? Token { get; set; } // ADICIONADO - propriedade faltante
//     }
//     private bool IsTokenExpired(JwtSecurityToken token)
//     {
//         var now = _timeProvider.GetUtcNow(); // Usar TimeProvider
//         return token.ValidTo <= now;
//     }
// }