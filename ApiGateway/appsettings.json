{
  // CONFIGURAÇÃO DE LOGGING
  // Define os níveis de log para diferentes componentes da aplicação
  "Logging": {
    "LogLevel": {
      "Default": "Information", // Nível padrão - mostra informações importantes
      "Microsoft.AspNetCore": "Warning", // Reduz logs do ASP.NET Core para apenas avisos e erros
      "Yarp": "Information", // Logs do YARP (nosso proxy reverso)
      "System.Net.Http.HttpClient": "Warning" // Reduz logs de requisições HTTP
    }
  },
  "AllowedHosts": "*", // Permite requisições de qualquer host (cuidado em produção!)
  
  // CONFIGURAÇÃO DO KEYCLOAK (Sistema de Autenticação)
  // Keycloak é um servidor de identidade que gerencia usuários e autenticação
  "Keycloak": {
    "Authority": "http://localhost:8080/realms/b-commerce-realm", // URL do servidor Keycloak
    "RequireHttpsMetadata": false, // Em desenvolvimento, permite HTTP (em produção deve ser true)
    "Audience": "b-commerce-backend", // Identifica nossa aplicação no Keycloak
    "ValidIssuers": [ // Lista de emissores válidos de tokens JWT
      "http://localhost:8080/realms/b-commerce-realm"
    ]
  },
  
  // CONFIGURAÇÃO DO REDIS (Cache Distribuído)
  // Redis é usado para cache e comunicação entre serviços
  "Redis": {
    "ConnectionString": "localhost:6379", // Endereço do servidor Redis
    "Database": 0, // Número do banco de dados Redis (0-15)
    "KeyPrefix": "api-gateway:" // Prefixo para todas as chaves do cache
  },
  
  // CONFIGURAÇÃO DE DESCOBERTA DE SERVIÇOS
  // Define como o gateway encontra e monitora os microserviços
  "ServiceDiscovery": {
    "RefreshInterval": "00:01:00", // Atualiza lista de serviços a cada 1 minuto
    "HealthCheckInterval": "00:00:30", // Verifica saúde dos serviços a cada 30 segundos
    "Services": {
      // SERVIÇO DE CLIENTES - Gerencia dados de clientes
      "client-service": {
        "BaseUrl": "http://localhost:5122", // URL base do serviço
        "HealthEndpoint": "/health", // Endpoint para verificar se está funcionando
        "Weight": 100 // Peso para balanceamento de carga (100 = peso normal)
      },
      // SERVIÇO DE CATÁLOGO - Gerencia produtos e categorias
      "catalog-service": {
        "BaseUrl": "http://localhost:5123",
        "HealthEndpoint": "/health",
        "Weight": 100
      },
      // SERVIÇO DE CARRINHO - Gerencia carrinho de compras
      "cart-service": {
        "BaseUrl": "http://localhost:5124",
        "HealthEndpoint": "/health",
        "Weight": 100
      },
      // SERVIÇO DE VENDAS - Processa pedidos e pagamentos
      "sales-service": {
        "BaseUrl": "http://localhost:5125",
        "HealthEndpoint": "/health",
        "Weight": 100
      }
    }
  },
  
  // CONFIGURAÇÃO DE RATE LIMITING (Limitação de Taxa)
  // Protege a API contra abuso limitando número de requisições por minuto
  "RateLimiting": {
    "DefaultPolicy": { // Política para usuários não autenticados
      "RequestsPerMinute": 100, // Máximo 100 requisições por minuto
      "BurstSize": 20 // Permite rajadas de até 20 requisições
    },
    "AuthenticatedPolicy": { // Política para usuários autenticados
      "RequestsPerMinute": 200, // Usuários logados podem fazer mais requisições
      "BurstSize": 50
    },
    "AdminPolicy": { // Política para administradores
      "RequestsPerMinute": 1000, // Administradores têm limite muito alto
      "BurstSize": 200
    }
  },
  
  // CONFIGURAÇÃO DE CIRCUIT BREAKER (Disjuntor)
  // Protege contra falhas em cascata parando requisições para serviços com problema
  "CircuitBreaker": {
    "FailureThreshold": 3, // Após 3 falhas consecutivas, "abre" o circuito
    "RecoveryTime": "00:00:30", // Aguarda 30 segundos antes de tentar novamente
    "MinimumThroughput": 10 // Mínimo de requisições para ativar o circuit breaker
  },
  
  // CONFIGURAÇÃO DE CORS (Cross-Origin Resource Sharing)
  // Permite que o frontend (Angular) acesse a API
  "CORS": {
    "AllowedOrigins": [ // URLs permitidas para acessar a API
      "http://localhost:4200", // Frontend Angular em desenvolvimento
      "https://localhost:4200" // Frontend Angular com HTTPS
    ],
    "AllowedMethods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"], // Métodos HTTP permitidos
    "AllowedHeaders": ["*"], // Permite todos os cabeçalhos
    "AllowCredentials": true // Permite envio de cookies e headers de autenticação
  },
  
  // CONFIGURAÇÃO DO YARP (Yet Another Reverse Proxy)
  // Esta é a configuração principal do proxy reverso
  "ReverseProxy": {
    // ROTAS - Definem como as requisições são direcionadas
    "Routes": {
      // ROTA PARA SERVIÇO DE CLIENTES
      "client-service-route": {
        "ClusterId": "client-service-cluster", // Qual cluster usar
        "AuthorizationPolicy": "authenticated", // Requer usuário logado
        "RateLimiterPolicy": "AuthenticatedPolicy", // Usa limite de usuários autenticados
        "Match": {
          "Path": "/api/client/{**catch-all}" // Captura todas as URLs que começam com /api/client/
        },
        "Transforms": [ // Transformações aplicadas à requisição
          {
            "PathPattern": "/api/client/{**catch-all}" // Mantém o mesmo caminho
          },
          {
            "RequestHeader": "X-Forwarded-For", // Adiciona IP do cliente original
            "Append": "{RemoteIpAddress}"
          },
          {
            "RequestHeader": "X-Gateway-Version", // Adiciona versão do gateway
            "Set": "1.0.0"
          },
          {
            "RequestHeader": "X-Request-ID", // Adiciona ID único para rastreamento
            "Set": "{NewGuid}"
          }
        ],
        "Metadata": { // Metadados para monitoramento e debugging
          "Service": "ClientService",
          "Version": "1.0",
          "RequiresAuth": "true"
        }
      },
      // ROTA PARA SERVIÇO DE CATÁLOGO (Público - não requer autenticação)
      "catalog-service-route": {
        "ClusterId": "catalog-service-cluster",
        "RateLimiterPolicy": "DefaultPolicy", // Usa limite padrão (menor)
        "Match": {
          "Path": "/api/catalog/{**catch-all}"
        },
        "Transforms": [
          {
            "PathPattern": "/api/catalog/{**catch-all}"
          },
          {
            "RequestHeader": "X-Forwarded-For",
            "Append": "{RemoteIpAddress}"
          },
          {
            "RequestHeader": "X-Gateway-Version",
            "Set": "1.0.0"
          },
          {
            "RequestHeader": "X-Request-ID",
            "Set": "{NewGuid}"
          }
        ],
        "Metadata": {
          "Service": "CatalogService",
          "Version": "1.0",
          "RequiresAuth": "false" // Não requer autenticação
        }
      },
      // ROTA PARA SERVIÇO DE CARRINHO
      "cart-service-route": {
        "ClusterId": "cart-service-cluster",
        "AuthorizationPolicy": "authenticated",
        "RateLimiterPolicy": "AuthenticatedPolicy",
        "Match": {
          "Path": "/api/cart/{**catch-all}"
        },
        "Transforms": [
          {
            "PathPattern": "/api/cart/{**catch-all}"
          },
          {
            "RequestHeader": "X-Forwarded-For",
            "Append": "{RemoteIpAddress}"
          },
          {
            "RequestHeader": "X-Gateway-Version",
            "Set": "1.0.0"
          },
          {
            "RequestHeader": "X-Request-ID",
            "Set": "{NewGuid}"
          },
          {
            "RequestHeader": "X-User-ID", // Adiciona ID do usuário do token JWT
            "Set": "{ClaimValue:sub}" // 'sub' é o claim padrão para ID do usuário
          }
        ],
        "Metadata": {
          "Service": "CartService",
          "Version": "1.0",
          "RequiresAuth": "true"
        }
      },
      // ROTA PARA SERVIÇO DE VENDAS
      "sales-service-route": {
        "ClusterId": "sales-service-cluster",
        "AuthorizationPolicy": "authenticated",
        "RateLimiterPolicy": "AuthenticatedPolicy",
        "Match": {
          "Path": "/api/sales/{**catch-all}"
        },
        "Transforms": [
          {
            "PathPattern": "/api/sales/{**catch-all}"
          },
          {
            "RequestHeader": "X-Forwarded-For",
            "Append": "{RemoteIpAddress}"
          },
          {
            "RequestHeader": "X-Gateway-Version",
            "Set": "1.0.0"
          },
          {
            "RequestHeader": "X-Request-ID",
            "Set": "{NewGuid}"
          },
          {
            "RequestHeader": "X-User-ID",
            "Set": "{ClaimValue:sub}"
          }
        ],
        "Metadata": {
          "Service": "SalesService",
          "Version": "1.0",
          "RequiresAuth": "true"
        }
      },
      // ROTA ESPECIAL PARA ADMINISTRADORES
      "admin-route": {
        "ClusterId": "client-service-cluster", // Reutiliza o cluster do client-service
        "AuthorizationPolicy": "admin", // Requer papel de administrador
        "RateLimiterPolicy": "AdminPolicy", // Usa limite alto para admins
        "Match": {
          "Path": "/api/admin/{**catch-all}"
        },
        "Transforms": [
          {
            "PathPattern": "/api/client/admin/{**catch-all}" // Redireciona para /api/client/admin/
          },
          {
            "RequestHeader": "X-Admin-Request", // Marca como requisição administrativa
            "Set": "true"
          },
          {
            "RequestHeader": "X-User-ID",
            "Set": "{ClaimValue:sub}"
          },
          {
            "RequestHeader": "X-User-Roles", // Adiciona papéis do usuário
            "Set": "{ClaimValue:realm_access}"
          }
        ],
        "Metadata": {
          "Service": "AdminService",
          "Version": "1.0",
          "RequiresAuth": "true",
          "RequiresRole": "admin"
        }
      }
    },
    // CLUSTERS - Definem os destinos das requisições
    "Clusters": {
      // CLUSTER DO SERVIÇO DE CLIENTES
      "client-service-cluster": {
        "LoadBalancingPolicy": "RoundRobin", // Distribui requisições em ordem circular
        "Destinations": {
          "client-service-1": { // Primeira (e única) instância do serviço
            "Address": "http://localhost:5122/", // URL do serviço
            "Health": "http://localhost:5122/health", // URL para verificar saúde
            "Metadata": {
              "Weight": "100", // Peso para balanceamento
              "Region": "local", // Região (útil em ambientes distribuídos)
              "Version": "1.0.0" // Versão do serviço
            }
          }
        },
        "HealthCheck": {
          "Active": { // Health check ativo - gateway verifica periodicamente
            "Enabled": true,
            "Interval": "00:00:30", // Verifica a cada 30 segundos
            "Timeout": "00:00:05", // Timeout de 5 segundos
            "Policy": "ConsecutiveFailures", // Marca como não saudável após falhas consecutivas
            "Path": "/health" // Endpoint para verificar
          },
          "Passive": { // Health check passivo - baseado em falhas de requisições reais
            "Enabled": true,
            "Policy": "TransportFailureRate", // Baseado na taxa de falhas de transporte
            "ReactivationPeriod": "00:01:00" // Tenta reativar após 1 minuto
          }
        },
        "HttpRequest": {
          "Timeout": "00:01:00", // Timeout de 1 minuto para requisições
          "Version": "2.0", // Usa HTTP/2
          "VersionPolicy": "RequestVersionOrLower" // Permite downgrade se necessário
        },
        "Metadata": {
          "Service": "ClientService",
          "CircuitBreaker.Enabled": "true", // Habilita circuit breaker
          "Retry.Enabled": "true" // Habilita retry automático
        }
      },
      // CLUSTER DO SERVIÇO DE CATÁLOGO
      "catalog-service-cluster": {
        "LoadBalancingPolicy": "LeastRequests", // Direciona para instância com menos requisições
        "Destinations": {
          "catalog-service-1": {
            "Address": "http://localhost:5123/",
            "Health": "http://localhost:5123/health",
            "Metadata": {
              "Weight": "100",
              "Region": "local",
              "Version": "1.0.0"
            }
          }
        },
        "HealthCheck": {
          "Active": {
            "Enabled": true,
            "Interval": "00:00:30",
            "Timeout": "00:00:05",
            "Policy": "ConsecutiveFailures",
            "Path": "/health"
          },
          "Passive": {
            "Enabled": true,
            "Policy": "TransportFailureRate",
            "ReactivationPeriod": "00:01:00"
          }
        },
        "HttpRequest": {
          "Timeout": "00:00:30", // Timeout menor (30s) para catálogo
          "Version": "2.0",
          "VersionPolicy": "RequestVersionOrLower"
        },
        "Metadata": {
          "Service": "CatalogService",
          "CircuitBreaker.Enabled": "true",
          "Retry.Enabled": "true"
        }
      },
      // CLUSTER DO SERVIÇO DE CARRINHO
      "cart-service-cluster": {
        "LoadBalancingPolicy": "RoundRobin",
        "Destinations": {
          "cart-service-1": {
            "Address": "http://localhost:5124/",
            "Health": "http://localhost:5124/health",
            "Metadata": {
              "Weight": "100",
              "Region": "local",
              "Version": "1.0.0"
            }
          }
        },
        "HealthCheck": {
          "Active": {
            "Enabled": true,
            "Interval": "00:00:30",
            "Timeout": "00:00:05",
            "Policy": "ConsecutiveFailures",
            "Path": "/health"
          },
          "Passive": {
            "Enabled": true,
            "Policy": "TransportFailureRate",
            "ReactivationPeriod": "00:01:00"
          }
        },
        "HttpRequest": {
          "Timeout": "00:01:00", // Timeout de 1 minuto para operações de carrinho
          "Version": "2.0",
          "VersionPolicy": "RequestVersionOrLower"
        },
        "Metadata": {
          "Service": "CartService",
          "CircuitBreaker.Enabled": "true",
          "Retry.Enabled": "true"
        }
      },
      // CLUSTER DO SERVIÇO DE VENDAS
      "sales-service-cluster": {
        "LoadBalancingPolicy": "RoundRobin",
        "Destinations": {
          "sales-service-1": {
            "Address": "http://localhost:5125/",
            "Health": "http://localhost:5125/health",
            "Metadata": {
              "Weight": "100",
              "Region": "local",
              "Version": "1.0.0"
            }
          }
        },
        "HealthCheck": {
          "Active": {
            "Enabled": true,
            "Interval": "00:00:30",
            "Timeout": "00:00:05",
            "Policy": "ConsecutiveFailures",
            "Path": "/health"
          },
          "Passive": {
            "Enabled": true,
            "Policy": "TransportFailureRate",
            "ReactivationPeriod": "00:01:00"
          }
        },
        "HttpRequest": {
          "Timeout": "00:01:00", // Timeout de 1 minuto para processamento de vendas
          "Version": "2.0",
          "VersionPolicy": "RequestVersionOrLower"
        },
        "Metadata": {
          "Service": "SalesService",
          "CircuitBreaker.Enabled": "true",
          "Retry.Enabled": "true"
        }
      }
    }
  }
}
